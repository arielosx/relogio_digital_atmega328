
psbClockGCC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  0000048a  0000053e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000048a  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  0080010c  0080010c  0000054a  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  0000054a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  0000054d  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000580  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000240  00000000  00000000  000005c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001cd9  00000000  00000000  00000800  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000d52  00000000  00000000  000024d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000e11  00000000  00000000  0000322b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000003f0  00000000  00000000  0000403c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000a92  00000000  00000000  0000442c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000080d  00000000  00000000  00004ebe  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000198  00000000  00000000  000056cb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 35 00 	jmp	0x6a	; 0x6a <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__vector_14>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

00000068 <__ctors_start>:
  68:	2e 02       	muls	r18, r30

0000006a <__ctors_end>:
  6a:	11 24       	eor	r1, r1
  6c:	1f be       	out	0x3f, r1	; 63
  6e:	cf ef       	ldi	r28, 0xFF	; 255
  70:	d8 e0       	ldi	r29, 0x08	; 8
  72:	de bf       	out	0x3e, r29	; 62
  74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_copy_data>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	a0 e0       	ldi	r26, 0x00	; 0
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	ea e8       	ldi	r30, 0x8A	; 138
  7e:	f4 e0       	ldi	r31, 0x04	; 4
  80:	02 c0       	rjmp	.+4      	; 0x86 <__do_copy_data+0x10>
  82:	05 90       	lpm	r0, Z+
  84:	0d 92       	st	X+, r0
  86:	ac 30       	cpi	r26, 0x0C	; 12
  88:	b1 07       	cpc	r27, r17
  8a:	d9 f7       	brne	.-10     	; 0x82 <__do_copy_data+0xc>

0000008c <__do_clear_bss>:
  8c:	21 e0       	ldi	r18, 0x01	; 1
  8e:	ac e0       	ldi	r26, 0x0C	; 12
  90:	b1 e0       	ldi	r27, 0x01	; 1
  92:	01 c0       	rjmp	.+2      	; 0x96 <.do_clear_bss_start>

00000094 <.do_clear_bss_loop>:
  94:	1d 92       	st	X+, r1

00000096 <.do_clear_bss_start>:
  96:	ad 31       	cpi	r26, 0x1D	; 29
  98:	b2 07       	cpc	r27, r18
  9a:	e1 f7       	brne	.-8      	; 0x94 <.do_clear_bss_loop>

0000009c <__do_global_ctors>:
  9c:	10 e0       	ldi	r17, 0x00	; 0
  9e:	c5 e3       	ldi	r28, 0x35	; 53
  a0:	d0 e0       	ldi	r29, 0x00	; 0
  a2:	04 c0       	rjmp	.+8      	; 0xac <__do_global_ctors+0x10>
  a4:	21 97       	sbiw	r28, 0x01	; 1
  a6:	fe 01       	movw	r30, r28
  a8:	0e 94 3d 02 	call	0x47a	; 0x47a <__tablejump2__>
  ac:	c4 33       	cpi	r28, 0x34	; 52
  ae:	d1 07       	cpc	r29, r17
  b0:	c9 f7       	brne	.-14     	; 0xa4 <__do_global_ctors+0x8>
  b2:	0e 94 5f 00 	call	0xbe	; 0xbe <main>
  b6:	0c 94 43 02 	jmp	0x486	; 0x486 <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <main>:
/* Aqui inicia o segmento de código */ 
.section .text   
 
.global main 
main:
  rcall assemblySYSTEM_Initialize
  be:	4d d1       	rcall	.+666    	; 0x35a <assemblySYSTEM_Initialize>
  rcall assemblyLcdInit
  c0:	47 d1       	rcall	.+654    	; 0x350 <assemblyLcdInit>

  ldi r24, 0x14
  c2:	84 e1       	ldi	r24, 0x14	; 20
  rcall assemblyLcdPrintHours
  c4:	64 d1       	rcall	.+712    	; 0x38e <assemblyLcdPrintHours>
  ldi r24, 0x32
  c6:	82 e3       	ldi	r24, 0x32	; 50
  rcall assemblyLcdPrintMinutes
  c8:	8d d1       	rcall	.+794    	; 0x3e4 <assemblyLcdPrintMinutes>
  ldi r24, 0x09
  ca:	89 e0       	ldi	r24, 0x09	; 9
  rcall assemblyLcdPrintSeconds
  cc:	ac d1       	rcall	.+856    	; 0x426 <assemblyLcdPrintSeconds>

000000ce <halt>:

halt: 
  rjmp halt 
  ce:	ff cf       	rjmp	.-2      	; 0xce <halt>

000000d0 <_ZN3LCDC1Ev>:
#include <stdio.h>
#include <string.h>
#include <inttypes.h>


LCD::LCD()
  d0:	08 95       	ret

000000d2 <_ZN3LCD11pulseEnableEv>:
		pinWrite(_data_pins[i], (value >> i) & 0x01);
	}
	pulseEnable();
}

void LCD::pulseEnable(void) {
  d2:	cf 93       	push	r28
  d4:	df 93       	push	r29
  d6:	ec 01       	movw	r28, r24
	pinWrite(_enable_pin, 0);
  d8:	60 e0       	ldi	r22, 0x00	; 0
  da:	89 81       	ldd	r24, Y+1	; 0x01
  dc:	0e 94 87 01 	call	0x30e	; 0x30e <pinWrite>
	delayMicroseconds(1);
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	0e 94 35 02 	call	0x46a	; 0x46a <_Z17delayMicrosecondsj>
	pinWrite(_enable_pin, 1);
  e8:	61 e0       	ldi	r22, 0x01	; 1
  ea:	89 81       	ldd	r24, Y+1	; 0x01
  ec:	0e 94 87 01 	call	0x30e	; 0x30e <pinWrite>
	delayMicroseconds(1);    // enable pulse must be >450 ns
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	0e 94 35 02 	call	0x46a	; 0x46a <_Z17delayMicrosecondsj>
	pinWrite(_enable_pin, 0);
  f8:	60 e0       	ldi	r22, 0x00	; 0
  fa:	89 81       	ldd	r24, Y+1	; 0x01
  fc:	0e 94 87 01 	call	0x30e	; 0x30e <pinWrite>
	delayMicroseconds(100);   // commands need >37 us to settle
 100:	84 e6       	ldi	r24, 0x64	; 100
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	0e 94 35 02 	call	0x46a	; 0x46a <_Z17delayMicrosecondsj>
}
 108:	df 91       	pop	r29
 10a:	cf 91       	pop	r28
 10c:	08 95       	ret

0000010e <_ZN3LCD10write4bitsEh>:
	// set the entry mode
	command(LCD_ENTRYMODESET | _displaymode);
}


void LCD::write4bits(uint8_t value) {
 10e:	ff 92       	push	r15
 110:	0f 93       	push	r16
 112:	1f 93       	push	r17
 114:	cf 93       	push	r28
 116:	df 93       	push	r29
 118:	8c 01       	movw	r16, r24
 11a:	f6 2e       	mov	r15, r22
	for (int i = 0; i < 4; i++) {
 11c:	c0 e0       	ldi	r28, 0x00	; 0
 11e:	d0 e0       	ldi	r29, 0x00	; 0
 120:	c4 30       	cpi	r28, 0x04	; 4
 122:	d1 05       	cpc	r29, r1
 124:	8c f4       	brge	.+34     	; 0x148 <_ZN3LCD10write4bitsEh+0x3a>
		pinWrite(_data_pins[i], (value >> i) & 0x01);
 126:	6f 2d       	mov	r22, r15
 128:	70 e0       	ldi	r23, 0x00	; 0
 12a:	0c 2e       	mov	r0, r28
 12c:	02 c0       	rjmp	.+4      	; 0x132 <_ZN3LCD10write4bitsEh+0x24>
 12e:	75 95       	asr	r23
 130:	67 95       	ror	r22
 132:	0a 94       	dec	r0
 134:	e2 f7       	brpl	.-8      	; 0x12e <_ZN3LCD10write4bitsEh+0x20>
 136:	61 70       	andi	r22, 0x01	; 1
 138:	f8 01       	movw	r30, r16
 13a:	ec 0f       	add	r30, r28
 13c:	fd 1f       	adc	r31, r29
 13e:	82 81       	ldd	r24, Z+2	; 0x02
 140:	0e 94 87 01 	call	0x30e	; 0x30e <pinWrite>
	command(LCD_ENTRYMODESET | _displaymode);
}


void LCD::write4bits(uint8_t value) {
	for (int i = 0; i < 4; i++) {
 144:	21 96       	adiw	r28, 0x01	; 1
 146:	ec cf       	rjmp	.-40     	; 0x120 <_ZN3LCD10write4bitsEh+0x12>
		pinWrite(_data_pins[i], (value >> i) & 0x01);
	}
	pulseEnable();
 148:	c8 01       	movw	r24, r16
 14a:	0e 94 69 00 	call	0xd2	; 0xd2 <_ZN3LCD11pulseEnableEv>
}
 14e:	df 91       	pop	r29
 150:	cf 91       	pop	r28
 152:	1f 91       	pop	r17
 154:	0f 91       	pop	r16
 156:	ff 90       	pop	r15
 158:	08 95       	ret

0000015a <_ZN3LCD4sendEhh>:
	}
	return 1;
}


void LCD::send(uint8_t value, uint8_t mode) {
 15a:	1f 93       	push	r17
 15c:	cf 93       	push	r28
 15e:	df 93       	push	r29
 160:	ec 01       	movw	r28, r24
 162:	16 2f       	mov	r17, r22
	pinWrite(_rs_pin, mode);
 164:	64 2f       	mov	r22, r20
 166:	88 81       	ld	r24, Y
 168:	0e 94 87 01 	call	0x30e	; 0x30e <pinWrite>
	write4bits(value>>4);
 16c:	61 2f       	mov	r22, r17
 16e:	70 e0       	ldi	r23, 0x00	; 0
 170:	75 95       	asr	r23
 172:	67 95       	ror	r22
 174:	75 95       	asr	r23
 176:	67 95       	ror	r22
 178:	75 95       	asr	r23
 17a:	67 95       	ror	r22
 17c:	75 95       	asr	r23
 17e:	67 95       	ror	r22
 180:	ce 01       	movw	r24, r28
 182:	0e 94 87 00 	call	0x10e	; 0x10e <_ZN3LCD10write4bitsEh>
	write4bits(value);
 186:	61 2f       	mov	r22, r17
 188:	ce 01       	movw	r24, r28
 18a:	0e 94 87 00 	call	0x10e	; 0x10e <_ZN3LCD10write4bitsEh>
}
 18e:	df 91       	pop	r29
 190:	cf 91       	pop	r28
 192:	1f 91       	pop	r17
 194:	08 95       	ret

00000196 <_ZN3LCD5writeEh>:
inline void LCD::command(uint8_t value) {
	send(value, 0);
}

uint8_t LCD::write(uint8_t value) {
	send(value + 48, 1);
 196:	60 5d       	subi	r22, 0xD0	; 208
 198:	41 e0       	ldi	r20, 0x01	; 1
 19a:	0e 94 ad 00 	call	0x15a	; 0x15a <_ZN3LCD4sendEhh>
	return 1; // assume success
}
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	08 95       	ret

000001a2 <_ZN3LCD5writeEPKc>:

uint8_t LCD::write(const char* s)
{
 1a2:	0f 93       	push	r16
 1a4:	1f 93       	push	r17
 1a6:	cf 93       	push	r28
 1a8:	df 93       	push	r29
 1aa:	8c 01       	movw	r16, r24
 1ac:	eb 01       	movw	r28, r22
	while(*s)
 1ae:	68 81       	ld	r22, Y
 1b0:	66 23       	and	r22, r22
 1b2:	31 f0       	breq	.+12     	; 0x1c0 <_ZN3LCD5writeEPKc+0x1e>
	{
		send(*s, 1);
 1b4:	41 e0       	ldi	r20, 0x01	; 1
 1b6:	c8 01       	movw	r24, r16
 1b8:	0e 94 ad 00 	call	0x15a	; 0x15a <_ZN3LCD4sendEhh>
		s++;
 1bc:	21 96       	adiw	r28, 0x01	; 1
	return 1; // assume success
}

uint8_t LCD::write(const char* s)
{
	while(*s)
 1be:	f7 cf       	rjmp	.-18     	; 0x1ae <_ZN3LCD5writeEPKc+0xc>
	{
		send(*s, 1);
		s++;
	}
	return 1;
}
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	df 91       	pop	r29
 1c4:	cf 91       	pop	r28
 1c6:	1f 91       	pop	r17
 1c8:	0f 91       	pop	r16
 1ca:	08 95       	ret

000001cc <_ZN3LCD7displayEv>:
	write4bits(value>>4);
	write4bits(value);
}

void LCD::display() {
	_displaycontrol |= LCD_DISPLAYON;
 1cc:	fc 01       	movw	r30, r24
 1ce:	67 81       	ldd	r22, Z+7	; 0x07
 1d0:	26 2f       	mov	r18, r22
 1d2:	24 60       	ori	r18, 0x04	; 4
 1d4:	27 83       	std	Z+7, r18	; 0x07
	command(LCD_DISPLAYCONTROL | _displaycontrol);
 1d6:	6c 60       	ori	r22, 0x0C	; 12
	delayMicroseconds(100);   // commands need >37 us to settle
}


inline void LCD::command(uint8_t value) {
	send(value, 0);
 1d8:	40 e0       	ldi	r20, 0x00	; 0
 1da:	0e 94 ad 00 	call	0x15a	; 0x15a <_ZN3LCD4sendEhh>
 1de:	08 95       	ret

000001e0 <_ZN3LCD5clearEv>:
 1e0:	40 e0       	ldi	r20, 0x00	; 0
 1e2:	61 e0       	ldi	r22, 0x01	; 1
 1e4:	0e 94 ad 00 	call	0x15a	; 0x15a <_ZN3LCD4sendEhh>
}

void LCD::clear()
{
	command(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
	delayMicroseconds(2000);  // this command takes a long time!
 1e8:	80 ed       	ldi	r24, 0xD0	; 208
 1ea:	97 e0       	ldi	r25, 0x07	; 7
 1ec:	0e 94 35 02 	call	0x46a	; 0x46a <_Z17delayMicrosecondsj>
 1f0:	08 95       	ret

000001f2 <_ZN3LCD5beginEhhh>:
	_displayfunction = LCD_4BITMODE | LCD_2LINE | LCD_5x8DOTS;

	begin(16, 2, LCD_5x8DOTS);
}

void LCD::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) {
 1f2:	cf 93       	push	r28
 1f4:	df 93       	push	r29
 1f6:	ec 01       	movw	r28, r24
	
	_numlines = lines;
 1f8:	4a 87       	std	Y+10, r20	; 0x0a
	_row_offsets[0] = 0x00;
 1fa:	1b 86       	std	Y+11, r1	; 0x0b
	_row_offsets[1] = 0x40;
 1fc:	80 e4       	ldi	r24, 0x40	; 64
 1fe:	8c 87       	std	Y+12, r24	; 0x0c
	delayMicroseconds(50000);
 200:	80 e5       	ldi	r24, 0x50	; 80
 202:	93 ec       	ldi	r25, 0xC3	; 195
 204:	0e 94 35 02 	call	0x46a	; 0x46a <_Z17delayMicrosecondsj>
	// Now we pull both RS and R/W low to begin commands
	pinWrite(_rs_pin, 0);
 208:	60 e0       	ldi	r22, 0x00	; 0
 20a:	88 81       	ld	r24, Y
 20c:	0e 94 87 01 	call	0x30e	; 0x30e <pinWrite>
	pinWrite(_enable_pin, 0);
 210:	60 e0       	ldi	r22, 0x00	; 0
 212:	89 81       	ldd	r24, Y+1	; 0x01
 214:	0e 94 87 01 	call	0x30e	; 0x30e <pinWrite>
	

	//put the LCD into 4 bit
	// this is according to the Hitachi HD44780 datasheet
	// page 45 figure 23
	write4bits(0x03);
 218:	63 e0       	ldi	r22, 0x03	; 3
 21a:	ce 01       	movw	r24, r28
 21c:	0e 94 87 00 	call	0x10e	; 0x10e <_ZN3LCD10write4bitsEh>
	delayMicroseconds(4500); // wait min 4.1ms
 220:	84 e9       	ldi	r24, 0x94	; 148
 222:	91 e1       	ldi	r25, 0x11	; 17
 224:	0e 94 35 02 	call	0x46a	; 0x46a <_Z17delayMicrosecondsj>

	// second try
	write4bits(0x03);
 228:	63 e0       	ldi	r22, 0x03	; 3
 22a:	ce 01       	movw	r24, r28
 22c:	0e 94 87 00 	call	0x10e	; 0x10e <_ZN3LCD10write4bitsEh>
	delayMicroseconds(4500); // wait min 4.1ms
 230:	84 e9       	ldi	r24, 0x94	; 148
 232:	91 e1       	ldi	r25, 0x11	; 17
 234:	0e 94 35 02 	call	0x46a	; 0x46a <_Z17delayMicrosecondsj>
		 
	// third go!
	write4bits(0x03);
 238:	63 e0       	ldi	r22, 0x03	; 3
 23a:	ce 01       	movw	r24, r28
 23c:	0e 94 87 00 	call	0x10e	; 0x10e <_ZN3LCD10write4bitsEh>
	delayMicroseconds(150);
 240:	86 e9       	ldi	r24, 0x96	; 150
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	0e 94 35 02 	call	0x46a	; 0x46a <_Z17delayMicrosecondsj>

	// finally, set to 4-bit interface
	write4bits(0x02);
 248:	62 e0       	ldi	r22, 0x02	; 2
 24a:	ce 01       	movw	r24, r28
 24c:	0e 94 87 00 	call	0x10e	; 0x10e <_ZN3LCD10write4bitsEh>

	
	
	// finally, set # lines, font size, etc.
	command(LCD_FUNCTIONSET | _displayfunction);
 250:	6e 81       	ldd	r22, Y+6	; 0x06
 252:	60 62       	ori	r22, 0x20	; 32
	delayMicroseconds(100);   // commands need >37 us to settle
}


inline void LCD::command(uint8_t value) {
	send(value, 0);
 254:	40 e0       	ldi	r20, 0x00	; 0
 256:	ce 01       	movw	r24, r28
 258:	0e 94 ad 00 	call	0x15a	; 0x15a <_ZN3LCD4sendEhh>
	
	// finally, set # lines, font size, etc.
	command(LCD_FUNCTIONSET | _displayfunction);

	// turn the display on with no cursor or blinking default
	_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 25c:	84 e0       	ldi	r24, 0x04	; 4
 25e:	8f 83       	std	Y+7, r24	; 0x07
	display();
 260:	ce 01       	movw	r24, r28
 262:	0e 94 e6 00 	call	0x1cc	; 0x1cc <_ZN3LCD7displayEv>

	// clear it off
	clear();
 266:	ce 01       	movw	r24, r28
 268:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <_ZN3LCD5clearEv>

	// Initialize to default text direction (for romance languages)
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 26c:	82 e0       	ldi	r24, 0x02	; 2
 26e:	88 87       	std	Y+8, r24	; 0x08
	delayMicroseconds(100);   // commands need >37 us to settle
}


inline void LCD::command(uint8_t value) {
	send(value, 0);
 270:	40 e0       	ldi	r20, 0x00	; 0
 272:	66 e0       	ldi	r22, 0x06	; 6
 274:	ce 01       	movw	r24, r28
 276:	0e 94 ad 00 	call	0x15a	; 0x15a <_ZN3LCD4sendEhh>

	// Initialize to default text direction (for romance languages)
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
	// set the entry mode
	command(LCD_ENTRYMODESET | _displaymode);
}
 27a:	df 91       	pop	r29
 27c:	cf 91       	pop	r28
 27e:	08 95       	ret

00000280 <_ZN3LCD4initEv>:
LCD::LCD()
{
}

void LCD::init()
{
 280:	fc 01       	movw	r30, r24
	_rs_pin = PinPB5;
 282:	80 e2       	ldi	r24, 0x20	; 32
 284:	80 83       	st	Z, r24
	_enable_pin = PinPB4;
 286:	80 e1       	ldi	r24, 0x10	; 16
 288:	81 83       	std	Z+1, r24	; 0x01
	
	_data_pins[0] = PinPB0;
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	82 83       	std	Z+2, r24	; 0x02
	_data_pins[1] = PinPB1;
 28e:	82 e0       	ldi	r24, 0x02	; 2
 290:	83 83       	std	Z+3, r24	; 0x03
	_data_pins[2] = PinPB2;
 292:	84 e0       	ldi	r24, 0x04	; 4
 294:	84 83       	std	Z+4, r24	; 0x04
	_data_pins[3] = PinPB3;
 296:	88 e0       	ldi	r24, 0x08	; 8
 298:	85 83       	std	Z+5, r24	; 0x05

	_displayfunction = LCD_4BITMODE | LCD_2LINE | LCD_5x8DOTS;
 29a:	86 83       	std	Z+6, r24	; 0x06

	begin(16, 2, LCD_5x8DOTS);
 29c:	20 e0       	ldi	r18, 0x00	; 0
 29e:	42 e0       	ldi	r20, 0x02	; 2
 2a0:	60 e1       	ldi	r22, 0x10	; 16
 2a2:	cf 01       	movw	r24, r30
 2a4:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <_ZN3LCD5beginEhhh>
 2a8:	08 95       	ret

000002aa <CPU_Initialize>:
#include <avr/io.h>
#include "../cpu.h"

void CPU_Initialize (void)
{
    PRR = (0 << PRADC)   // PRADC disabled
 2aa:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__TEXT_REGION_LENGTH__+0x7f8064>
            | (0 << PRTIM0)   // PRTIM0 disabled
            | (0 << PRTIM1)   // PRTIM1 disabled
            | (0 << PRTIM2)   // PRTIM2 disabled
            | (0 << PRTWI)   // PRTWI disabled
            | (0 << PRUSART0);   // PRUSART0 disabled
    CLKPR = (0 << CLKPCE)   // CLKPCE disabled
 2ae:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7f8061>
            | (0 << CLKPS0);   // CLKPS 1
    SMCR = (0 << SE)   // SE disabled
 2b2:	13 be       	out	0x33, r1	; 51
            | (0 << SM0);   // SM IDLE
    MCUCR = (0 << BODS)   // BODS disabled
 2b4:	15 be       	out	0x35, r1	; 53
 2b6:	08 95       	ret

000002b8 <CPUINT_Initialize>:
#include "../cpuint.h"

int8_t CPUINT_Initialize(void) 
{
    //IVCE disabled; IVSEL disabled; 
    MCUCR = 0x0;
 2b8:	15 be       	out	0x35, r1	; 53
    
    //I enabled; 
    SREG = 0x80;
 2ba:	80 e8       	ldi	r24, 0x80	; 128
 2bc:	8f bf       	out	0x3f, r24	; 63

    return 0;
 2be:	80 e0       	ldi	r24, 0x00	; 0
 2c0:	08 95       	ret

000002c2 <LcdTimer_Initialize>:
}

uint8_t LcdTimer_ReadTimer(void)
{
    return TCNT0;
}
 2c2:	83 e0       	ldi	r24, 0x03	; 3
 2c4:	87 bd       	out	0x27, r24	; 39
 2c6:	18 bc       	out	0x28, r1	; 40
 2c8:	16 bc       	out	0x26, r1	; 38
 2ca:	13 bc       	out	0x23, r1	; 35
 2cc:	82 e0       	ldi	r24, 0x02	; 2
 2ce:	84 bd       	out	0x24, r24	; 36
 2d0:	91 e0       	ldi	r25, 0x01	; 1
 2d2:	95 bd       	out	0x25, r25	; 37
 2d4:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
 2d8:	80 e0       	ldi	r24, 0x00	; 0
 2da:	08 95       	ret

000002dc <__vector_14>:

ISR(TIMER0_COMPA_vect)
{
 2dc:	1f 92       	push	r1
 2de:	0f 92       	push	r0
 2e0:	0f b6       	in	r0, 0x3f	; 63
 2e2:	0f 92       	push	r0
 2e4:	11 24       	eor	r1, r1
 2e6:	8f 93       	push	r24
 2e8:	9f 93       	push	r25
	timer_us ++;
 2ea:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <timer_us>
 2ee:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <timer_us+0x1>
 2f2:	01 96       	adiw	r24, 0x01	; 1
 2f4:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <timer_us+0x1>
 2f8:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <timer_us>
    //clears the Compare A interrupt flag
    TIFR0 = OCF0A;
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	85 bb       	out	0x15, r24	; 21
    /* Insert your Compare A interrupt handling code here */
    
}
 300:	9f 91       	pop	r25
 302:	8f 91       	pop	r24
 304:	0f 90       	pop	r0
 306:	0f be       	out	0x3f, r0	; 63
 308:	0f 90       	pop	r0
 30a:	1f 90       	pop	r1
 30c:	18 95       	reti

0000030e <pinWrite>:

#include "pinWrite.h"

void pinWrite(Pin pin, uint8_t val)
{
	if (val == 0) {
 30e:	61 11       	cpse	r22, r1
 310:	05 c0       	rjmp	.+10     	; 0x31c <pinWrite+0xe>
		PORTB &= ~pin;
 312:	95 b1       	in	r25, 0x05	; 5
 314:	80 95       	com	r24
 316:	89 23       	and	r24, r25
 318:	85 b9       	out	0x05, r24	; 5
 31a:	08 95       	ret
		} else {
		PORTB |= pin;
 31c:	95 b1       	in	r25, 0x05	; 5
 31e:	89 2b       	or	r24, r25
 320:	85 b9       	out	0x05, r24	; 5
 322:	08 95       	ret

00000324 <_Z41__static_initialization_and_destruction_0ii>:
	digits[0] = resultado;
}

extern "C" void AssemblyLcdClear()
{
	lcd.clear();
 324:	01 97       	sbiw	r24, 0x01	; 1
 326:	39 f4       	brne	.+14     	; 0x336 <_Z41__static_initialization_and_destruction_0ii+0x12>
 328:	6f 3f       	cpi	r22, 0xFF	; 255
 32a:	7f 4f       	sbci	r23, 0xFF	; 255
 32c:	21 f4       	brne	.+8      	; 0x336 <_Z41__static_initialization_and_destruction_0ii+0x12>
 32e:	8c e0       	ldi	r24, 0x0C	; 12
 330:	91 e0       	ldi	r25, 0x01	; 1
 332:	0e 94 68 00 	call	0xd0	; 0xd0 <_ZN3LCDC1Ev>
 336:	08 95       	ret

00000338 <_Z22PIN_MANAGER_Initializev>:
 338:	8f e3       	ldi	r24, 0x3F	; 63
 33a:	84 b9       	out	0x04, r24	; 4
 33c:	17 b8       	out	0x07, r1	; 7
 33e:	84 e0       	ldi	r24, 0x04	; 4
 340:	8a b9       	out	0x0a, r24	; 10
 342:	15 b8       	out	0x05, r1	; 5
 344:	18 b8       	out	0x08, r1	; 8
 346:	1b b8       	out	0x0b, r1	; 11
 348:	13 b8       	out	0x03, r1	; 3
 34a:	16 b8       	out	0x06, r1	; 6
 34c:	19 b8       	out	0x09, r1	; 9
 34e:	08 95       	ret

00000350 <assemblyLcdInit>:
 350:	8c e0       	ldi	r24, 0x0C	; 12
 352:	91 e0       	ldi	r25, 0x01	; 1
 354:	0e 94 40 01 	call	0x280	; 0x280 <_ZN3LCD4initEv>
 358:	08 95       	ret

0000035a <assemblySYSTEM_Initialize>:
 35a:	0e 94 55 01 	call	0x2aa	; 0x2aa <CPU_Initialize>
 35e:	0e 94 9c 01 	call	0x338	; 0x338 <_Z22PIN_MANAGER_Initializev>
 362:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <CPUINT_Initialize>
 366:	0e 94 61 01 	call	0x2c2	; 0x2c2 <LcdTimer_Initialize>
 36a:	08 95       	ret

0000036c <getDigits>:
 36c:	9d ec       	ldi	r25, 0xCD	; 205
 36e:	89 9f       	mul	r24, r25
 370:	91 2d       	mov	r25, r1
 372:	11 24       	eor	r1, r1
 374:	96 95       	lsr	r25
 376:	96 95       	lsr	r25
 378:	96 95       	lsr	r25
 37a:	fb 01       	movw	r30, r22
 37c:	91 83       	std	Z+1, r25	; 0x01
 37e:	99 0f       	add	r25, r25
 380:	29 2f       	mov	r18, r25
 382:	22 0f       	add	r18, r18
 384:	22 0f       	add	r18, r18
 386:	92 0f       	add	r25, r18
 388:	89 1b       	sub	r24, r25
 38a:	80 83       	st	Z, r24
 38c:	08 95       	ret

0000038e <assemblyLcdPrintHours>:
 38e:	1f 93       	push	r17
 390:	cf 93       	push	r28
 392:	df 93       	push	r29
 394:	00 d0       	rcall	.+0      	; 0x396 <assemblyLcdPrintHours+0x8>
 396:	cd b7       	in	r28, 0x3d	; 61
 398:	de b7       	in	r29, 0x3e	; 62
 39a:	18 2f       	mov	r17, r24
 39c:	65 e0       	ldi	r22, 0x05	; 5
 39e:	71 e0       	ldi	r23, 0x01	; 1
 3a0:	8c e0       	ldi	r24, 0x0C	; 12
 3a2:	91 e0       	ldi	r25, 0x01	; 1
 3a4:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <_ZN3LCD5writeEPKc>
 3a8:	19 82       	std	Y+1, r1	; 0x01
 3aa:	1a 82       	std	Y+2, r1	; 0x02
 3ac:	be 01       	movw	r22, r28
 3ae:	6f 5f       	subi	r22, 0xFF	; 255
 3b0:	7f 4f       	sbci	r23, 0xFF	; 255
 3b2:	81 2f       	mov	r24, r17
 3b4:	0e 94 b6 01 	call	0x36c	; 0x36c <getDigits>
 3b8:	6a 81       	ldd	r22, Y+2	; 0x02
 3ba:	8c e0       	ldi	r24, 0x0C	; 12
 3bc:	91 e0       	ldi	r25, 0x01	; 1
 3be:	0e 94 cb 00 	call	0x196	; 0x196 <_ZN3LCD5writeEh>
 3c2:	69 81       	ldd	r22, Y+1	; 0x01
 3c4:	8c e0       	ldi	r24, 0x0C	; 12
 3c6:	91 e0       	ldi	r25, 0x01	; 1
 3c8:	0e 94 cb 00 	call	0x196	; 0x196 <_ZN3LCD5writeEh>
 3cc:	6a e0       	ldi	r22, 0x0A	; 10
 3ce:	71 e0       	ldi	r23, 0x01	; 1
 3d0:	8c e0       	ldi	r24, 0x0C	; 12
 3d2:	91 e0       	ldi	r25, 0x01	; 1
 3d4:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <_ZN3LCD5writeEPKc>
 3d8:	0f 90       	pop	r0
 3da:	0f 90       	pop	r0
 3dc:	df 91       	pop	r29
 3de:	cf 91       	pop	r28
 3e0:	1f 91       	pop	r17
 3e2:	08 95       	ret

000003e4 <assemblyLcdPrintMinutes>:
 3e4:	cf 93       	push	r28
 3e6:	df 93       	push	r29
 3e8:	00 d0       	rcall	.+0      	; 0x3ea <assemblyLcdPrintMinutes+0x6>
 3ea:	cd b7       	in	r28, 0x3d	; 61
 3ec:	de b7       	in	r29, 0x3e	; 62
 3ee:	19 82       	std	Y+1, r1	; 0x01
 3f0:	1a 82       	std	Y+2, r1	; 0x02
 3f2:	be 01       	movw	r22, r28
 3f4:	6f 5f       	subi	r22, 0xFF	; 255
 3f6:	7f 4f       	sbci	r23, 0xFF	; 255
 3f8:	0e 94 b6 01 	call	0x36c	; 0x36c <getDigits>
 3fc:	6a 81       	ldd	r22, Y+2	; 0x02
 3fe:	8c e0       	ldi	r24, 0x0C	; 12
 400:	91 e0       	ldi	r25, 0x01	; 1
 402:	0e 94 cb 00 	call	0x196	; 0x196 <_ZN3LCD5writeEh>
 406:	69 81       	ldd	r22, Y+1	; 0x01
 408:	8c e0       	ldi	r24, 0x0C	; 12
 40a:	91 e0       	ldi	r25, 0x01	; 1
 40c:	0e 94 cb 00 	call	0x196	; 0x196 <_ZN3LCD5writeEh>
 410:	6a e0       	ldi	r22, 0x0A	; 10
 412:	71 e0       	ldi	r23, 0x01	; 1
 414:	8c e0       	ldi	r24, 0x0C	; 12
 416:	91 e0       	ldi	r25, 0x01	; 1
 418:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <_ZN3LCD5writeEPKc>
 41c:	0f 90       	pop	r0
 41e:	0f 90       	pop	r0
 420:	df 91       	pop	r29
 422:	cf 91       	pop	r28
 424:	08 95       	ret

00000426 <assemblyLcdPrintSeconds>:
 426:	cf 93       	push	r28
 428:	df 93       	push	r29
 42a:	00 d0       	rcall	.+0      	; 0x42c <assemblyLcdPrintSeconds+0x6>
 42c:	cd b7       	in	r28, 0x3d	; 61
 42e:	de b7       	in	r29, 0x3e	; 62
 430:	19 82       	std	Y+1, r1	; 0x01
 432:	1a 82       	std	Y+2, r1	; 0x02
 434:	be 01       	movw	r22, r28
 436:	6f 5f       	subi	r22, 0xFF	; 255
 438:	7f 4f       	sbci	r23, 0xFF	; 255
 43a:	0e 94 b6 01 	call	0x36c	; 0x36c <getDigits>
 43e:	6a 81       	ldd	r22, Y+2	; 0x02
 440:	8c e0       	ldi	r24, 0x0C	; 12
 442:	91 e0       	ldi	r25, 0x01	; 1
 444:	0e 94 cb 00 	call	0x196	; 0x196 <_ZN3LCD5writeEh>
 448:	69 81       	ldd	r22, Y+1	; 0x01
 44a:	8c e0       	ldi	r24, 0x0C	; 12
 44c:	91 e0       	ldi	r25, 0x01	; 1
 44e:	0e 94 cb 00 	call	0x196	; 0x196 <_ZN3LCD5writeEh>
 452:	0f 90       	pop	r0
 454:	0f 90       	pop	r0
 456:	df 91       	pop	r29
 458:	cf 91       	pop	r28
 45a:	08 95       	ret

0000045c <_GLOBAL__sub_I__Z22PIN_MANAGER_Initializev>:
}
 45c:	6f ef       	ldi	r22, 0xFF	; 255
 45e:	7f ef       	ldi	r23, 0xFF	; 255
 460:	81 e0       	ldi	r24, 0x01	; 1
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	0e 94 92 01 	call	0x324	; 0x324 <_Z41__static_initialization_and_destruction_0ii>
 468:	08 95       	ret

0000046a <_Z17delayMicrosecondsj>:
#include "timer.h"


void delayMicroseconds(uint16_t us)
{
	while(timer_us < us){}
 46a:	20 91 1b 01 	lds	r18, 0x011B	; 0x80011b <timer_us>
 46e:	30 91 1c 01 	lds	r19, 0x011C	; 0x80011c <timer_us+0x1>
 472:	28 17       	cp	r18, r24
 474:	39 07       	cpc	r19, r25
 476:	c8 f3       	brcs	.-14     	; 0x46a <_Z17delayMicrosecondsj>
}
 478:	08 95       	ret

0000047a <__tablejump2__>:
 47a:	ee 0f       	add	r30, r30
 47c:	ff 1f       	adc	r31, r31
 47e:	05 90       	lpm	r0, Z+
 480:	f4 91       	lpm	r31, Z
 482:	e0 2d       	mov	r30, r0
 484:	09 94       	ijmp

00000486 <_exit>:
 486:	f8 94       	cli

00000488 <__stop_program>:
 488:	ff cf       	rjmp	.-2      	; 0x488 <__stop_program>
