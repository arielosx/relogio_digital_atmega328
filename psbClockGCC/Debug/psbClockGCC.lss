
psbClockGCC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002e7  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000250  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  00800100  00800100  000002e4  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  000002e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  000002e7  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000318  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000001a0  00000000  00000000  00000358  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000019c0  00000000  00000000  000004f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000b83  00000000  00000000  00001eb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000b23  00000000  00000000  00002a3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000320  00000000  00000000  00003560  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000009c3  00000000  00000000  00003880  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007a4  00000000  00000000  00004243  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000138  00000000  00000000  000049e7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 35 00 	jmp	0x6a	; 0x6a <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__vector_4>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__vector_14>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

00000068 <__ctors_start>:
  68:	19 01       	movw	r2, r18

0000006a <__ctors_end>:
  6a:	11 24       	eor	r1, r1
  6c:	1f be       	out	0x3f, r1	; 63
  6e:	cf ef       	ldi	r28, 0xFF	; 255
  70:	d8 e0       	ldi	r29, 0x08	; 8
  72:	de bf       	out	0x3e, r29	; 62
  74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_copy_data>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	a0 e0       	ldi	r26, 0x00	; 0
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	e0 e5       	ldi	r30, 0x50	; 80
  7e:	f2 e0       	ldi	r31, 0x02	; 2
  80:	02 c0       	rjmp	.+4      	; 0x86 <__do_copy_data+0x10>
  82:	05 90       	lpm	r0, Z+
  84:	0d 92       	st	X+, r0
  86:	a0 30       	cpi	r26, 0x00	; 0
  88:	b1 07       	cpc	r27, r17
  8a:	d9 f7       	brne	.-10     	; 0x82 <__do_copy_data+0xc>

0000008c <__do_clear_bss>:
  8c:	21 e0       	ldi	r18, 0x01	; 1
  8e:	a0 e0       	ldi	r26, 0x00	; 0
  90:	b1 e0       	ldi	r27, 0x01	; 1
  92:	01 c0       	rjmp	.+2      	; 0x96 <.do_clear_bss_start>

00000094 <.do_clear_bss_loop>:
  94:	1d 92       	st	X+, r1

00000096 <.do_clear_bss_start>:
  96:	a1 31       	cpi	r26, 0x11	; 17
  98:	b2 07       	cpc	r27, r18
  9a:	e1 f7       	brne	.-8      	; 0x94 <.do_clear_bss_loop>

0000009c <__do_global_ctors>:
  9c:	10 e0       	ldi	r17, 0x00	; 0
  9e:	c5 e3       	ldi	r28, 0x35	; 53
  a0:	d0 e0       	ldi	r29, 0x00	; 0
  a2:	04 c0       	rjmp	.+8      	; 0xac <__do_global_ctors+0x10>
  a4:	21 97       	sbiw	r28, 0x01	; 1
  a6:	fe 01       	movw	r30, r28
  a8:	0e 94 20 01 	call	0x240	; 0x240 <__tablejump2__>
  ac:	c4 33       	cpi	r28, 0x34	; 52
  ae:	d1 07       	cpc	r29, r17
  b0:	c9 f7       	brne	.-14     	; 0xa4 <__do_global_ctors+0x8>
  b2:	0e 94 d7 00 	call	0x1ae	; 0x1ae <main>
  b6:	0c 94 26 01 	jmp	0x24c	; 0x24c <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
 
// Aqui inicia o segmento de código
.section .text 

.org 0x0
rjmp main ; reset
  be:	77 c0       	rjmp	.+238    	; 0x1ae <main>
  c0:	00 00       	nop
  c2:	00 00       	nop
  c4:	00 00       	nop

.org 0x8
rjmp PCINT1_vect ; PCINT1C
  c6:	82 c0       	rjmp	.+260    	; 0x1cc <__vector_4>
	...

000001ae <main>:

.global main 
.org 0xF0
main:
	ldi AUX, 0b1000111
 1ae:	a7 e4       	ldi	r26, 0x47	; 71
	out DDRC, AUX ; Define PC3, PC4 e PC5 como entradas
 1b0:	a7 b9       	out	0x07, r26	; 7
	com AUX
 1b2:	a0 95       	com	r26
	out KEYBOARD, AUX ; Zera as saÃ­das da PORTC e ativa os resistores pull-up de PC3, PC4 e PC5
 1b4:	a6 b9       	out	0x06, r26	; 6

	ldi AUX, 0b010
 1b6:	a2 e0       	ldi	r26, 0x02	; 2
	sts PCICR, AUX ; Ativa PCINT da porta C
 1b8:	a0 93 68 00 	sts	0x0068, r26	; 0x800068 <__TEXT_REGION_LENGTH__+0x7f8068>

	ldi AUX, 0b00111000
 1bc:	a8 e3       	ldi	r26, 0x38	; 56
	sts PCMSK1, AUX ; Habilita PCINT13, PCINT12 e PCINT11
 1be:	a0 93 6c 00 	sts	0x006C, r26	; 0x80006c <__TEXT_REGION_LENGTH__+0x7f806c>

	ldi AUX, 0xFF
 1c2:	af ef       	ldi	r26, 0xFF	; 255
	out DDRB, AUX
 1c4:	a4 b9       	out	0x04, r26	; 4
	out PORTB, AUX
 1c6:	a5 b9       	out	0x05, r26	; 5

	sei
 1c8:	78 94       	sei

000001ca <halt>:
halt: 
	rjmp halt  
 1ca:	ff cf       	rjmp	.-2      	; 0x1ca <halt>

000001cc <__vector_4>:

.global PCINT1_vect
PCINT1_vect:
	ldi AUX, 0b1110
 1cc:	ae e0       	ldi	r26, 0x0E	; 14
	out PORTB, AUX
 1ce:	a5 b9       	out	0x05, r26	; 5

	sbis KEYBOARD, BUTTON_SKIP ; ignora skip se o botão não foi pressionao
 1d0:	35 9b       	sbis	0x06, 5	; 6
	rjmp skip
 1d2:	05 c0       	rjmp	.+10     	; 0x1de <skip>
	sbis KEYBOARD, BUTTON_UP ; ignora skip se o botão não foi pressionao
 1d4:	34 9b       	sbis	0x06, 4	; 6
	rjmp up
 1d6:	05 c0       	rjmp	.+10     	; 0x1e2 <up>
	sbis KEYBOARD, BUTTON_DOWN ; ignora skip se o botão não foi pressionao
 1d8:	33 9b       	sbis	0x06, 3	; 6
	rjmp down
 1da:	05 c0       	rjmp	.+10     	; 0x1e6 <down>
	reti
 1dc:	18 95       	reti

000001de <skip>:
skip:
	cbi PORTB, 1
 1de:	29 98       	cbi	0x05, 1	; 5
	reti
 1e0:	18 95       	reti

000001e2 <up>:
up:
	cbi PORTB, 2
 1e2:	2a 98       	cbi	0x05, 2	; 5
	reti
 1e4:	18 95       	reti

000001e6 <down>:
down:
	cbi PORTB, 3
 1e6:	2b 98       	cbi	0x05, 3	; 5
	reti
 1e8:	18 95       	reti

000001ea <_ZN3LCDC1Ev>:
#include <stdio.h>
#include <string.h>
#include <inttypes.h>


LCD::LCD()
 1ea:	08 95       	ret

000001ec <__vector_14>:
{
    return TCNT0;
}

ISR(TIMER0_COMPA_vect)
{
 1ec:	1f 92       	push	r1
 1ee:	0f 92       	push	r0
 1f0:	0f b6       	in	r0, 0x3f	; 63
 1f2:	0f 92       	push	r0
 1f4:	11 24       	eor	r1, r1
 1f6:	8f 93       	push	r24
 1f8:	9f 93       	push	r25
	timer_us ++;
 1fa:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <timer_us>
 1fe:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <timer_us+0x1>
 202:	01 96       	adiw	r24, 0x01	; 1
 204:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <timer_us+0x1>
 208:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <timer_us>
    //clears the Compare A interrupt flag
    TIFR0 = OCF0A;
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	85 bb       	out	0x15, r24	; 21
    /* Insert your Compare A interrupt handling code here */
    
}
 210:	9f 91       	pop	r25
 212:	8f 91       	pop	r24
 214:	0f 90       	pop	r0
 216:	0f be       	out	0x3f, r0	; 63
 218:	0f 90       	pop	r0
 21a:	1f 90       	pop	r1
 21c:	18 95       	reti

0000021e <_Z41__static_initialization_and_destruction_0ii>:
	digits[0] = resultado;
}

extern "C" void AssemblyLcdClear()
{
	lcd.clear();
 21e:	01 97       	sbiw	r24, 0x01	; 1
 220:	39 f4       	brne	.+14     	; 0x230 <_Z41__static_initialization_and_destruction_0ii+0x12>
 222:	6f 3f       	cpi	r22, 0xFF	; 255
 224:	7f 4f       	sbci	r23, 0xFF	; 255
 226:	21 f4       	brne	.+8      	; 0x230 <_Z41__static_initialization_and_destruction_0ii+0x12>
 228:	80 e0       	ldi	r24, 0x00	; 0
 22a:	91 e0       	ldi	r25, 0x01	; 1
 22c:	0e 94 f5 00 	call	0x1ea	; 0x1ea <_ZN3LCDC1Ev>
 230:	08 95       	ret

00000232 <_GLOBAL__sub_I__Z22PIN_MANAGER_Initializev>:
}
 232:	6f ef       	ldi	r22, 0xFF	; 255
 234:	7f ef       	ldi	r23, 0xFF	; 255
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	0e 94 0f 01 	call	0x21e	; 0x21e <_Z41__static_initialization_and_destruction_0ii>
 23e:	08 95       	ret

00000240 <__tablejump2__>:
 240:	ee 0f       	add	r30, r30
 242:	ff 1f       	adc	r31, r31
 244:	05 90       	lpm	r0, Z+
 246:	f4 91       	lpm	r31, Z
 248:	e0 2d       	mov	r30, r0
 24a:	09 94       	ijmp

0000024c <_exit>:
 24c:	f8 94       	cli

0000024e <__stop_program>:
 24e:	ff cf       	rjmp	.-2      	; 0x24e <__stop_program>
